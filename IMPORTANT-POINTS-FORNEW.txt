# IMPORTANT POINTS - NEW SHOPIFY APP SETUP

## 🚀 COMPLETE NEW APP SETUP GUIDE

### Prerequisites:
- Node.js 20+ installed
- Git installed  
- Shopify CLI installed (`npm install -g @shopify/cli`)
- Vercel account
- GitHub account

## 📦 STEP 1: CREATE NEW SHOPIFY APP

### Create App:
```bash
# Create new app
shopify app create

# Choose options:
# - Template: React Router (recommended)
# - Language: TypeScript
# - Package manager: npm
```

### Initial Setup:
```bash
cd your-app-name
npm install
```

## 🔧 STEP 2: GIT REPOSITORY SETUP

### Initialize Git:
```bash
git init
git add .
git commit -m "Initial commit - Shopify app created"
```

### Create GitHub Repository:
1. Go to GitHub.com
2. Create new repository (don't initialize with README)
3. Copy the repository URL

### Connect to GitHub:
```bash
git remote add origin https://github.com/username/repository-name.git
git branch -M main
git push -u origin main
```

## ☁️ STEP 3: VERCEL SETUP

### Install Vercel CLI:
```bash
npm install -g vercel
```

### Login to Vercel:
```bash
vercel login
```

### Deploy to Vercel:
```bash
vercel --prod
```

### Import GitHub Repository to Vercel:
1. Go to vercel.com dashboard
2. Import Git Repository  
3. Select your GitHub repo
4. Deploy

⚠️ **IMPORTANT**: Disable auto-deployment in Vercel settings!

## 📝 STEP 4: SHOPIFY APP CONFIGURATION

### Update shopify.app.toml:
```toml
client_id = "your_app_client_id"
name = "Your App Name"
application_url = "https://your-vercel-url.vercel.app"
embedded = true

[access_scopes]
scopes = "write_products,read_products" # Add scopes as needed

[auth]
redirect_urls = [ "https://your-vercel-url.vercel.app/auth" ]
```

### Deploy to Shopify:
```bash
shopify app deploy
```

## 🔑 STEP 5: ENVIRONMENT VARIABLES

### In Vercel Dashboard:
Add these environment variables:
```
SHOPIFY_API_KEY=your_api_key
SHOPIFY_API_SECRET=your_api_secret
SCOPES=write_products,read_products
DATABASE_URL=postgresql://... (if using database)
```

### Local Development (.env):
```bash
SHOPIFY_API_KEY=your_api_key
SHOPIFY_API_SECRET=your_api_secret
SCOPES=write_products,read_products
DATABASE_URL=postgresql://localhost:5432/your_db
```

## 🗄️ STEP 6: DATABASE SETUP (if needed)

### Using Prisma (recommended):
```bash
# Already included in template
npx prisma generate
npx prisma db push
```

### For production, use managed database:
- Railway.app (free tier)
- Supabase (free tier)
- PlanetScale (free tier)

## 🏗️ STEP 7: PROJECT STRUCTURE

### Recommended file structure:
```
app/
├── routes/
│   ├── app._index.tsx          # Main app page
│   ├── api.yourEndpoint.tsx    # API routes
│   └── auth.$.tsx              # Auth handling
├── shopify.server.ts           # Shopify integration
└── root.tsx                    # Root component

prisma/
└── schema.prisma               # Database schema

shopify.app.toml                # Shopify configuration
```

## 🔄 STEP 8: DEVELOPMENT WORKFLOW

### Local Development:
```bash
shopify app dev
```

### Making Changes:
```bash
# 1. Make code changes
# 2. Commit to git
git add .
git commit -m "feature: description"
git push origin main

# 3. Deploy to Shopify
shopify app deploy

# 4. Deploy to Vercel (CRITICAL!)
npx vercel --prod

# 5. Update URLs if Vercel URL changed
# Edit shopify.app.toml with new URL
# Run: shopify app deploy again
```

## ⚡ STEP 9: API ROUTES SETUP

### Create API routes for better reliability:
```typescript
// app/routes/api.updateSomething.tsx
import type { ActionFunctionArgs } from "react-router";
import { authenticate } from "../shopify.server";

export const action = async ({ request }: ActionFunctionArgs) => {
  const { admin, session } = await authenticate.admin(request);
  
  const formData = await request.formData();
  // Handle your logic here
  
  return Response.json({ success: true });
};
```

### Use fetch() instead of fetcher:
```typescript
const response = await fetch('/api/updateSomething', {
  method: 'POST',
  body: formData
});
const result = await response.json();
```

## 🧪 STEP 10: TESTING

### Test in Development Store:
1. Create development store
2. Install your app
3. Test all functionality

### Test Deployment:
1. Add version indicator: `console.log('VERSION X')`
2. Deploy and verify version shows up
3. Test all features work in production

## 🚨 CRITICAL DEPLOYMENT RULES

### ALWAYS REMEMBER:
1. `shopify app deploy` = Updates app config only
2. `npx vercel --prod` = Deploys actual code
3. BOTH are required for changes to appear
4. Vercel URL changes require shopify.app.toml update

### Deployment Checklist:
□ Code committed to git
□ `shopify app deploy` executed
□ `npx vercel --prod` executed  
□ URLs updated if Vercel URL changed
□ Testing in dev store
□ Version indicator shows correct version

## 📊 MONITORING & MAINTENANCE

### Health Checks:
- Monitor Vercel deployments
- Check Shopify App Store (if public)
- Monitor error logs
- Test critical functionality weekly

### Common Issues:
- 405 Method Not Allowed → Missing API routes
- Changes not appearing → Forgot `npx vercel --prod`
- Auth issues → Wrong URLs in shopify.app.toml

## 🔧 RECOMMENDED TOOLS

### Development:
- VS Code with Shopify extensions
- React DevTools
- Postman (API testing)

### Deployment:
- GitHub Actions (optional CI/CD)
- Vercel CLI
- Shopify CLI

### Monitoring:
- Vercel Analytics
- Sentry (error tracking)
- LogRocket (user sessions)

## 💡 BEST PRACTICES

1. **Version Everything**: Use semantic versioning
2. **Test First**: Always test in dev store
3. **Document Changes**: Keep good commit messages  
4. **Error Handling**: Always handle API errors gracefully
5. **Performance**: Implement debouncing for user inputs
6. **Security**: Never expose API keys in frontend code
7. **Accessibility**: Follow WCAG guidelines
8. **Mobile**: Test on mobile devices

---
Last Updated: 2025-01-07
Template Version: React Router v7
Status: Production Ready Setup Guide ✅